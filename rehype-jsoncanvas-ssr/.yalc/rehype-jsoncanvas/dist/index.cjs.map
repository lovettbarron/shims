{"version":3,"file":"index.cjs","sources":["../node_modules/@trbn/jsoncanvas/dist/index.mjs","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../src/options.ts","../src/jsoncanvas.ts","../src/embed.ts","../src/plugin.ts","../node_modules/unist-util-visit/lib/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass JSONCanvas {\n  constructor(nodes, edges) {\n    __publicField(this, \"nodes\", []);\n    __publicField(this, \"edges\", []);\n    if (nodes) {\n      this.nodes = nodes;\n    }\n    if (edges) {\n      this.edges = edges;\n    }\n  }\n  addNode(node) {\n    if (this.nodes.find((n) => n.id === node.id)) {\n      throw new Error(\"A node with the same ID already exists in this.nodes\");\n    }\n    this.nodes.push(node);\n  }\n  addEdge(edge) {\n    if (this.edges.find((e) => e.id === edge.id)) {\n      throw new Error(\"An edge with the same ID already exists in this.edges\");\n    }\n    this.edges.push(edge);\n  }\n  getNode(id) {\n    return this.nodes.find((n) => n.id === id);\n  }\n  getEdge(id) {\n    return this.edges.find((e) => e.id === id);\n  }\n  getNodes() {\n    return this.nodes;\n  }\n  getEdges() {\n    return this.edges;\n  }\n  removeNode(id) {\n    this.nodes = this.nodes.filter((n) => n.id !== id);\n    this.edges = this.edges.filter((e) => e.fromNode !== id && e.toNode !== id);\n  }\n  removeEdge(id) {\n    this.edges = this.edges.filter((e) => e.id !== id);\n  }\n  toString() {\n    return JSON.stringify({\n      nodes: this.nodes,\n      edges: this.edges\n    });\n  }\n  static fromString(json) {\n    const obj = JSON.parse(json);\n    return new JSONCanvas(obj.nodes, obj.edges);\n  }\n}\n\nexport { JSONCanvas, JSONCanvas as default };\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * Options for the jsoncanvas\n */\nexport interface Options {\n  /**\n   * Open links in a new tab\n   *\n   * Defaults to true\n   */\n  openEmbededInNewTab?: boolean\n\n  /**\n   * This is a dumb hack for accomodating SSr. Basically, the mrakdown embed path requires the SSR relative path, and image svg is from the client side, so doesn't see the `public`directory. Otherwise will use assetPath\n   *\n   * Defaults to 'public'\n   */\n  ssrPath?: string\n\n  /**\n   * Define an asset path where the .canvas files exists. This will add the asset path before the filename. Otherwise uses cwd.process() path + filename\n   *\n   * Defaults to null\n   */\n  assetPath?: string | null\n\n  /**\n   * Define an markdown path where the .md files will be searched for WHEN EMBEDDING ONLY. This will add the md path before the filename. Otherwise uses assetPath defaults\n   *\n   * Defaults to null\n   */\n  mdPath?: string | null\n\n  /**\n   * Canvas node stroke width\n   *\n   * Defaults to 3\n   */\n  nodeStrokeWidth?: number\n\n  /**\n   * Canvas line stroke width\n   *\n   * Defaults to 5\n   */\n  lineStrokeWidth?: number\n}\n\n/**\n * Applies default values for any unspecified options\n */\nexport function applyDefaults(config: Partial<Options> = {}): Options {\n  return {\n    openEmbededInNewTab:\n      config.openEmbededInNewTab === undefined\n        ? true\n        : config.openEmbededInNewTab,\n    assetPath: config.assetPath === undefined ? null : config.assetPath,\n    ssrPath: config.ssrPath === undefined ? \"public\" : config.ssrPath,\n    mdPath: config.mdPath === undefined ? config.assetPath : config.mdPath,\n    nodeStrokeWidth:\n      config.nodeStrokeWidth === undefined ? 3 : config.nodeStrokeWidth,\n    lineStrokeWidth:\n      config.lineStrokeWidth === undefined ? 5 : config.lineStrokeWidth,\n  }\n}\n","import type { Element } from \"hast\"\nimport { s } from \"hastscript\"\n\nimport type { Edge, GenericNode, JSONCanvas } from \"@trbn/jsoncanvas\"\n\nimport { type Options, applyDefaults } from \"./options\"\n\nimport { drawEmbedded, drawMarkdownEmbed } from \"./embed\"\n\nfunction calculateMinimumCanvasSize(jsc: JSONCanvas) {\n  let minX = Number.POSITIVE_INFINITY\n  let minY = Number.POSITIVE_INFINITY\n  let maxX = Number.NEGATIVE_INFINITY\n  let maxY = Number.NEGATIVE_INFINITY\n\n  for (const node of jsc.getNodes()) {\n    minX = Math.min(minX, node.x)\n    minY = Math.min(minY, node.y)\n    maxX = Math.max(maxX, node.x + node.width)\n    maxY = Math.max(maxY, node.y + node.height)\n  }\n\n  const canvasWidth = maxX - minX\n  const canvasHeight = maxY - minY\n\n  return { canvasWidth, canvasHeight, offsetX: -minX, offsetY: -minY }\n}\n\nexport function validate(jsonCanvasData: JSONCanvas) {\n  // Use the typescript lib to vlaidate?\n  console.log(\"Validate!\", jsonCanvasData)\n  return true\n}\n\nexport function render(\n  jsc: JSONCanvas,\n  config?: Partial<Options>,\n): Element | null {\n  const options = applyDefaults(config)\n\n  const { canvasWidth, canvasHeight, offsetX, offsetY } =\n    calculateMinimumCanvasSize(jsc)\n\n  // Init Canvas objects\n  const svg = initRender(canvasWidth + offsetX, canvasHeight + offsetY)\n\n  if (svg === null) return null\n\n  // Draw nodes\n  for (const node of jsc.getNodes()) {\n    drawNode(svg, node, options)\n  }\n\n  // Draw Edges\n  for (const edge of jsc.getEdges()) {\n    const fromNode = jsc.getNodes().find((node) => node.id === edge.fromNode)\n    const toNode = jsc.getNodes().find((node) => node.id === edge.toNode)\n    if (toNode !== undefined && fromNode !== undefined)\n      drawEdge(svg, toNode, fromNode, edge, options)\n  }\n\n  return svg\n}\n\nfunction initRender(\n  width: number,\n  height: number,\n  config?: Partial<Options>,\n): Element {\n  const options = applyDefaults(config)\n  const BASE_SVG_PROPS = {\n    version: \"1.1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"xmlns:xlink\": \"http://www.w3.org/1999/xlink\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\",\n    \"stroke-width\": options.lineStrokeWidth,\n    \"fill-rule\": \"evenodd\",\n    fill: \"currentColor\",\n    stroke: \"currentColor\",\n  }\n\n  const props = {\n    ...BASE_SVG_PROPS,\n    width: \"100%\",\n    height: \"100%\",\n    renWidth: width as number,\n    renHeight: height as number,\n    viewBox: `0 0 ${width} ${height}`,\n    preserveAspectRatio: \"none\",\n  }\n\n  const svg = s(\"svg\", props)\n  svg.properties\n  return svg\n}\n\nasync function drawNode(\n  svg: Element,\n  node: GenericNode | any,\n  config?: Partial<Options>,\n) {\n  const options = applyDefaults(config)\n\n  let fillStyle = \"rgba(255, 255, 255, .5)\"\n  let strokeStyle = \"rgba(0,0,0,1)\"\n\n  if (node.color === \"1\") {\n    fillStyle = \"rgba(255, 0, 0, .5)\"\n    strokeStyle = \"rgba(255,0,0,1)\"\n  } else if (node.color === \"2\") {\n    fillStyle = \"rgba(255, 100, 0, .5)\"\n    strokeStyle = \"rgba(255,100,0,1)\"\n  } else if (node.color === \"3\") {\n    fillStyle = \"rgba(255, 255, 0, .5)\"\n    strokeStyle = \"rgba(255,255,0,1)\"\n  } else if (node.color === \"4\") {\n    fillStyle = \"rgba(0, 255, 100, .5)\"\n    strokeStyle = \"rgba(0,100,0,1)\"\n  } else if (node.color === \"5\") {\n    fillStyle = \"rgba(0, 255, 255, .5)\"\n    strokeStyle = \"rgba(0,255,255,1)\"\n  } else if (node.color === \"6\") {\n    fillStyle = \"rgba(100, 10, 100, .5)\"\n    strokeStyle = \"rgba(100,10,100,1)\"\n  }\n\n  const group = s(\"g\")\n\n  const rect = s(\"rect\", {\n    x: node.x + <number>svg.properties.renWidth / 2,\n    y: node.y + <number>svg.properties.renHeight / 2,\n    width: node.width,\n    height: node.height,\n    rx: 5,\n    ry: 5,\n    stroke: strokeStyle,\n    fill: fillStyle,\n    \"stroke-width\": options.lineStrokeWidth,\n  })\n\n  group.children.push(rect)\n\n  drawEmbedded(svg, group, node, config)\n  drawMarkdownEmbed(svg, group, node, config)\n\n  // Group Label\n  if (node.label) {\n    const t = s(\n      \"text\",\n      {\n        x: node.x + 5 + <number>svg.properties.renWidth / 2,\n        y: node.y - 10 + <number>svg.properties.renHeight / 2,\n        \"font-family\": \"monospace\",\n        \"font-size\": 20,\n        \"stroke-width\": 1,\n      },\n      node.label,\n    )\n    group.children.push(t)\n  }\n\n  // Node within a rect\n  if (node.type === \"text\" && node.text) {\n    const t = s(\n      \"text\",\n      {\n        x: node.x + 5 + <number>svg.properties.renWidth / 2,\n        y:\n          node.y +\n          5 +\n          <number>node.height / 2 +\n          <number>svg.properties.renHeight / 2,\n        \"font-family\": \"monospace\",\n        \"font-size\": 20,\n        \"stroke-width\": 1,\n      },\n      node.text,\n    )\n    group.children.push(t)\n  }\n\n  svg.children.push(group)\n}\n\nfunction drawEdge(\n  svg: Element,\n  toNode: GenericNode,\n  fromNode: GenericNode,\n  edge: Edge | any,\n  config?: Partial<Options>,\n) {\n  const options = applyDefaults(config)\n  if (svg === null || svg === undefined) return\n\n  const cWidth = <number>svg.properties.renWidth || (1 as number)\n  const cHeight = <number>svg.properties.renHeight || (1 as number)\n\n  if (fromNode && toNode) {\n    let startX =\n      fromNode.x +\n      (edge.fromSide === \"top\" || edge.fromSide === \"bottom\"\n        ? fromNode.width / 2\n        : fromNode.width) +\n      cWidth / 2\n    let startY = fromNode.y + fromNode.height / 2 + cHeight / 2\n    let endX =\n      toNode.x +\n      (edge.toSide === \"top\" || edge.toSide === \"bottom\"\n        ? toNode.width / 2\n        : toNode.width) +\n      cWidth / 2\n    let endY = toNode.y + toNode.height / 2 + cHeight / 2\n\n    if (edge.fromSide === \"left\") {\n      startX = fromNode.x + cWidth / 2\n    } else if (edge.fromSide === \"top\") {\n      startY = fromNode.y + cHeight / 2\n    } else if (edge.fromSide === \"bottom\") {\n      startY = fromNode.y + fromNode.height + cHeight / 2\n    }\n\n    if (edge.toSide === \"right\") {\n      endX = toNode.x + toNode.width + cWidth / 2\n    } else if (edge.toSide === \"top\") {\n      endY = toNode.y + cHeight / 2\n    } else if (edge.toSide === \"bottom\") {\n      endY = toNode.y + toNode.height + cHeight / 2\n    } else if (edge.toSide === \"left\") {\n      endX = toNode.x + cWidth / 2\n    }\n\n    // Change the control point logic based on fromSide/toSide\n    const cp1 = {\n      x: startX,\n      y: endY,\n    }\n\n    const cp2 = {\n      x: endX,\n      y: startY,\n    }\n\n    const line = s(\"path\", {\n      d: `M ${startX} ${startY} C ${cp1.x} ${cp1.y}, ${cp2.x} ${cp2.y}, ${endX} ${endY}`,\n      stroke: \"black\",\n      \"stroke-width\": options.lineStrokeWidth,\n      fill: \"none\",\n    })\n    svg.children.push(line)\n  }\n}\n","import path from \"node:path\"\nimport type { Element } from \"hast\"\nimport { s } from \"hastscript\"\n\nimport { fromMarkdown } from \"mdast-util-from-markdown\"\nimport { toHast } from \"mdast-util-to-hast\"\n\nimport type { GenericNode } from \"@trbn/jsoncanvas\"\n// import { applyDefaults, Options } from \"./options\";\nimport { getCanvasFromEmbed } from \"./plugin\"\n\nimport { type Options, applyDefaults } from \"./options\"\n\n// This renders out the images\nexport async function drawEmbedded(\n  svg: Element,\n  grp: Element,\n  node: GenericNode | any,\n  config?: Partial<Options>,\n) {\n  const options = applyDefaults(config)\n  console.log(\n    \"Test\",\n    options.assetPath ? path.join(options.assetPath, node.file) : node.file,\n  )\n  if (node.type === \"file\" && svg) {\n    if (node.file.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      const imgPath = options.assetPath\n        ? path.join(options.assetPath, node.file)\n        : node.file\n\n      const image = s(\"image\", {\n        x: 5 + node.x + <number>svg.properties.renWidth / 2,\n        y: 5 + node.y + <number>svg.properties.renHeight / 2,\n        width: node.width - 10,\n        height: node.height - 10,\n        \"xlink:href\": imgPath,\n      })\n\n      grp.children.push(image)\n    }\n  }\n}\n\n// This renders out the images\nexport async function drawMarkdownEmbed(\n  svg: Element,\n  grp: Element,\n  node: GenericNode | any,\n  config?: Partial<Options>,\n) {\n  if (node.type === \"file\" && svg) {\n    if (node.file.match(/\\.(md|mdx)$/i)) {\n      const mdFile = await getCanvasFromEmbed(node.file, config)\n\n      const mdast = fromMarkdown(mdFile)\n      const hast = toHast(mdast)\n\n      // Ref: https://stackoverflow.com/questions/45518545/svg-foreignobject-not-showing-on-any-browser-why\n      const embed = s(\"foreignObject\", {\n        x: 5 + node.x + <number>svg.properties.renWidth / 2,\n        y: 5 + node.y + <number>svg.properties.renHeight / 2,\n        width: node.width - 10,\n        height: node.height - 10,\n      })\n      embed.children.push(hast as Element) // If this breaks, this is probably the spot it breaks\n\n      grp.children.push(embed)\n    }\n  }\n}\n","import fs from \"node:fs\";\nimport path from \"node:path\";\nimport JSONCanvas from \"@trbn/jsoncanvas\";\nimport type { Element, Root } from \"hast\";\nimport { h } from \"hastscript\";\nimport type { Plugin } from \"unified\";\n// import { fromHtmlIsomorphic } from \"hast-util-from-html-isomorphic\";\nimport { visit } from \"unist-util-visit\";\nimport { render, validate } from \"./jsoncanvas\";\n\nimport { type Options, applyDefaults } from \"./options\";\n/*\n\nLet's think this through.\nI need to fetch the relevant embedded .canvas elements, and parse across two different ways of embedding, ![](file.canvas) and [[file.canvas]]\n\nThen I need to generate a canvas node, and populate it with the relevent objects per the jsoncanvas spec\n\nThen I need to pass this populated canvas back to rehype to be placed into the rendered html stream\n\nCore Assumptions:\n- Assume serverside, pga markdown\n- Assume a canvas fallback incase of old browser\n- Assume a need for arbitrary sized canvas\n- Assume a fallback for improperly formatted canvas\n\nThings decide:\n- Navigable/zoomable?\n- Themeable? > Probably want a css module that can be overridden in config\n\n*/\n\nexport const rehypeJsonCanvas: Plugin<[(Options | undefined)?], Root> = (\n  config?: Partial<Options>\n) => {\n  return async (tree) => {\n    const nodesToReplace = [] as Array<Element>;\n\n    // Iterate over the markdown file as tree\n    visit(tree, \"element\", (node, index) => {\n      // only match image embeds\n      if (node.tagName !== \"img\" || index === undefined) {\n        return;\n      }\n\n      // This makes sure that the file in the image tag is a canvas\n      const canvasCheck = node.properties.src as string;\n      if (!canvasCheck.includes(\".canvas\")) return;\n\n      nodesToReplace.push(node);\n      // index = index += 1;\n    });\n\n    for (const node of nodesToReplace) {\n      const canvasPath = node.properties.src as string;\n      const canvasMarkdown = await getCanvasFromEmbed(canvasPath, config);\n\n      if (canvasMarkdown.length < 1) return;\n      const jsonCanvasFromString = JSONCanvas.fromString(canvasMarkdown);\n\n      let canvas = null;\n\n      if (validate(jsonCanvasFromString)) {\n        canvas = render(jsonCanvasFromString, config);\n      } else {\n        canvas = h(\"div\", \"Not a properly formatted JsonCanvas\");\n      }\n\n      if (!canvas) return;\n      node.properties = {\n        ...node.properties,\n      };\n      node.tagName = \"div\";\n      node.children = [];\n      node.children.push(canvas);\n    }\n  };\n};\n\nexport async function getCanvasFromEmbed(\n  markdownPath: string,\n  config?: Partial<Options>\n): Promise<string> {\n  const options = applyDefaults(config);\n  let canvasMarkdown = \"\";\n  const webcheck = markdownPath.trim().toLowerCase();\n\n  // https://stackoverflow.com/questions/190852/how-can-i-get-file-extensions-with-javascript/12900504#12900504\n  const extension = webcheck.slice(\n    (Math.max(0, webcheck.lastIndexOf(\".\")) || Number.POSITIVE_INFINITY) + 1\n  );\n\n  if (webcheck.startsWith(\"https://\") || typeof window !== \"undefined\") {\n    await fetch(markdownPath)\n      .then((res) => res.text())\n      .then((text) => {\n        canvasMarkdown = text;\n      });\n  } else if (options.ssrPath !== undefined) {\n    let pathArr = [process.cwd()];\n\n    if (options.ssrPath && extension !== \"md\") pathArr.push(options.ssrPath);\n    if (extension === \"md\" && options.mdPath) pathArr.push(options.mdPath);\n\n    pathArr.push(markdownPath);\n\n    const ssrPath = path.join(...pathArr);\n\n    try {\n      canvasMarkdown = fs.readFileSync(ssrPath, {\n        encoding: \"utf8\",\n        flag: \"r\",\n      });\n    } catch (err) {\n      console.log(\"No Canvas File Found. Try using the assetPath option!\", err);\n    }\n  } else {\n    console.log(\n      \"If you're running this plugin via serverside renering, you'll need to define an ssrPath relative to your project file. Take a look at the readme or nextjs project for examples.\"\n    );\n  }\n  if (canvasMarkdown === null) return \"\";\n\n  return canvasMarkdown;\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n"],"names":["__defProp","Object","defineProperty","__publicField","obj","key","value","enumerable","configurable","writable","__defNormalProp","JSONCanvas","constructor","nodes","edges","this","addNode","node","find","n","id","Error","push","addEdge","edge","e","getNode","getEdge","getNodes","getEdges","removeNode","filter","fromNode","toNode","removeEdge","toString","JSON","stringify","fromString","json","parse","convert","test","ok","castFactory","Array","isArray","tests","checks","index","length","parameters","apply","anyFactory","check","checkAsRecord","nodeAsRecord","propsFactory","type","testFunction","parent","Boolean","looksLikeANode","call","undefined","empty","EXIT","applyDefaults","config","openEmbededInNewTab","assetPath","ssrPath","mdPath","nodeStrokeWidth","lineStrokeWidth","drawNode","svg","options","fillStyle","strokeStyle","color","group","s","rect","x","properties","renWidth","y","renHeight","width","height","rx","ry","stroke","fill","children","grp","console","log","path","join","file","match","imgPath","image","Promise","resolve","reject","drawEmbedded","_temp2","_temp","getCanvasFromEmbed","then","mdFile","mdast","fromMarkdown","hast","toHast","embed","drawMarkdownEmbed","label","t","text","_settle","pact","state","_Pact","bind","v","o","prototype","onFulfilled","onRejected","result","callback","thenable","markdownPath","canvasMarkdown","webcheck","trim","toLowerCase","extension","slice","Math","max","lastIndexOf","Number","POSITIVE_INFINITY","startsWith","window","fetch","res","pathArr","process","cwd","fs","readFileSync","encoding","flag","err","rehypeJsonCanvas","tree","_exit","nodesToReplace","testOrVisitor","visitorOrReverse","maybeReverse","reverse","visitor","tagName","src","includes","visit","is","factory","parents","name","subresult","offset","grandparents","toResult","nodeAsParent","concat","visitParents","indexOf","_forOf","canvas","jsonCanvasFromString","jsc","props","_calculateMinimumCanv","_step","minX","minY","maxX","NEGATIVE_INFINITY","maxY","_iterator","_createForOfIteratorHelperLoose","done","min","canvasWidth","canvasHeight","offsetX","offsetY","calculateMinimumCanvasSize","_extends","version","xmlns","initRender","viewBox","preserveAspectRatio","_iterator2","_step2","_step3","_loop","cWidth","cHeight","startX","fromSide","startY","endX","toSide","endY","cp1","cp2","line","d","drawEdge","_iterator3","render"],"mappings":"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"}